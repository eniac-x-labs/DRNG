// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomNumberGeneratorClient is the client API for RandomNumberGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomNumberGeneratorClient interface {
	RequestRandomNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnaryResponse, error)
	SendInternalMessage(ctx context.Context, in *TransportMessage, opts ...grpc.CallOption) (*UnaryResponse, error)
}

type randomNumberGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomNumberGeneratorClient(cc grpc.ClientConnInterface) RandomNumberGeneratorClient {
	return &randomNumberGeneratorClient{cc}
}

func (c *randomNumberGeneratorClient) RequestRandomNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, "/proto.RandomNumberGenerator/RequestRandomNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomNumberGeneratorClient) SendInternalMessage(ctx context.Context, in *TransportMessage, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, "/proto.RandomNumberGenerator/SendInternalMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomNumberGeneratorServer is the server API for RandomNumberGenerator service.
// All implementations must embed UnimplementedRandomNumberGeneratorServer
// for forward compatibility
type RandomNumberGeneratorServer interface {
	RequestRandomNumber(context.Context, *emptypb.Empty) (*UnaryResponse, error)
	SendInternalMessage(context.Context, *TransportMessage) (*UnaryResponse, error)
	mustEmbedUnimplementedRandomNumberGeneratorServer()
}

// UnimplementedRandomNumberGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedRandomNumberGeneratorServer struct {
}

func (UnimplementedRandomNumberGeneratorServer) RequestRandomNumber(context.Context, *emptypb.Empty) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRandomNumber not implemented")
}
func (UnimplementedRandomNumberGeneratorServer) SendInternalMessage(context.Context, *TransportMessage) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInternalMessage not implemented")
}
func (UnimplementedRandomNumberGeneratorServer) mustEmbedUnimplementedRandomNumberGeneratorServer() {}

// UnsafeRandomNumberGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomNumberGeneratorServer will
// result in compilation errors.
type UnsafeRandomNumberGeneratorServer interface {
	mustEmbedUnimplementedRandomNumberGeneratorServer()
}

func RegisterRandomNumberGeneratorServer(s grpc.ServiceRegistrar, srv RandomNumberGeneratorServer) {
	s.RegisterService(&RandomNumberGenerator_ServiceDesc, srv)
}

func _RandomNumberGenerator_RequestRandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomNumberGeneratorServer).RequestRandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RandomNumberGenerator/RequestRandomNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomNumberGeneratorServer).RequestRandomNumber(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomNumberGenerator_SendInternalMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomNumberGeneratorServer).SendInternalMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RandomNumberGenerator/SendInternalMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomNumberGeneratorServer).SendInternalMessage(ctx, req.(*TransportMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RandomNumberGenerator_ServiceDesc is the grpc.ServiceDesc for RandomNumberGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomNumberGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RandomNumberGenerator",
	HandlerType: (*RandomNumberGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRandomNumber",
			Handler:    _RandomNumberGenerator_RequestRandomNumber_Handler,
		},
		{
			MethodName: "SendInternalMessage",
			Handler:    _RandomNumberGenerator_SendInternalMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
